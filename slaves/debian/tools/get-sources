#!/usr/bin/env python
import os
import json
import sys
import subprocess

kBuildId = sys.argv[1]
kCache   = sys.argv[2]
kBuildDir = os.path.join(os.path.expanduser('~'), 
                        "build-%s" % str(kBuildId))

kBasetgzCache = os.path.join(os.path.expanduser('~'), "base-cache")

def print_motd():
    subprocess.check_call("echo Start build at $(date '+%x %X')", shell=True)
    subprocess.check_call("lsb_release -a || true", shell=True)

def prepare_source():
    if not os.path.exists(os.path.join(kCache, 'extra_args.json')):
        print("extra_args.json is missing")
        sys.exit(1)
    
    with open(os.path.join(kCache, 'extra_args.json')) as fp:
        content = json.loads(fp.read())

    if not os.path.exists(kBuildDir):
        os.makedirs(kBuildDir)

    if not os.path.exists(kBasetgzCache):
        os.makedirs(kBasetgzCache)

    if content.get('basetgz'):
        reponame = content['reponame'].split('/')[0]
        basetgz = '%(reponame)s-%(md5sum)s' % {'reponame': reponame, 'md5sum': content['basetgz']['md5sum']}
        cachedtgz = os.path.join(kBasetgzCache, basetgz)

        if os.path.exists(cachedtgz):
            print("Use cached builder runtime: %s" % basetgz)
            subprocess.check_call("ln -sf %s base.tgz" % cachedtgz, cwd=kBuildDir, shell=True)
        else:
            print("Clean unused buildtgz")
            subprocess.check_call("rm -f %s-*" % reponame, cwd=kBasetgzCache, shell=True)
            print("Fetching builder runtime: %s" % content['basetgz']['url'])
            _basetgz = "%s.%d" % (basetgz, os.getpid())
            subprocess.check_call("wget -q -t 3 -O %s %s" % (_basetgz, content['basetgz']['url']), cwd=kBasetgzCache, shell=True)
            subprocess.check_call("mv %s %s" % (_basetgz, basetgz), cwd=kBasetgzCache, shell=True)
            subprocess.check_call("ln -sf %s base.tgz" % cachedtgz, cwd=kBuildDir, shell=True)
    
    print("Fetching builder source: ")
    dscfile = content['files'][0]
    subprocess.check_call("dget -q -ud %s/%s" % (content['base_url'], dscfile) , cwd=kBuildDir, shell=True)
    
    if content.get('triggered', 1) != 1:
        triggered = content['triggered']
        print("Inherit triggered %d times to sources" % triggered)
        subprocess.check_call("dpkg-source -x %s" % dscfile , cwd=kBuildDir, shell=True)
        
        version = dscfile.split('_')[1][:-4]
        origname = dscfile.split('_')[0]
        subprocess.check_call("rm -f %s" % dscfile, shell=True, cwd=kBuildDir)

        if '-' in version and 'community' in basetgz and 'stable' in basetgz:
            version = version.split('-')[0]
            destver = "%s-%d+comsta" % (version, triggered)
        elif '-' in version and 'stable' in basetgz:
            version = version.split('-')[0]
            destver = "%s-%d+stable" % (version, triggered)
        elif '-' in version and 'community' in basetgz:
            version = version.split('-')[0]
            destver = "%s-%d" % (version, triggered)
        else:
            destver = "%s+pkg%d" % (version, triggered)

        changelog = '%(origname)s-%(version)s/debian/changelog' % \
            {"origname": origname, "version": version}
        
        subprocess.check_call("sed -i s/\(%(origver)s\.*\)/\(%(destver)s\)/ %(changelog)s" % 
            {"origver": version, "destver": destver, "changelog": changelog}, 
            cwd=kBuildDir, shell=True)
        subprocess.check_call("dpkg-source -b %(origname)s-%(version)s" % 
            {"origname": origname, "version": version}, 
            cwd=kBuildDir, shell=True)

def main():
    print_motd()
    prepare_source()

if __name__ == '__main__':
    main()
